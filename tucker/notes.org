* google hangout <2013-06-11 Tue>
  -bracket intresting stuff with ffi calls to find them in intermediate files
  -functon order can get reversed in different passes
  -names are not mangled too much in intermediate code
  -implement 2 vector types words and reals with a parameter of number elements and a parametr of element size
  -look at codegen prim predicate, that checks if an opperation is
  supported
* google hangout <2013-06-14 Fri>
-asserts in mlton/lib/basic, use for testing
-functor calls get expanded, so try to share code explictly
-handle generic code
-datatype of vectorop
* google hangout <2013-06-18 Tue>
  -alignment question
  -Vector primitive needs to be written
  -I need to do this myself (woo?)
    -Atoms.prims is first place to look
    -then look at places its used
    -then goto basis lib primitives and instantiate it there
    -Array0Const is a good place to look for an 
  -MLton has an unsafe array to vector conversion
  -Compairsons both bool and actual int/float values

  -Functors for type paramiterization is a good idea, just be sure to
  share the code that does the backend work
* google hangout <2013-06-21 Fri>
  -Might be some predefined objects aligned to 8 byte boundries
  -Also look at the runtime stuff, thats probably the issue
  -basis lib unsafe.mlb to create uninitalized array
  -compare c calls to c calls, i.e. c-simd call vs c-for loop

* google hangout <2013-07-03 Wed>
  -want something like word128 ! ! !
  -this is important for performance.
  -tuples are tricky.
  -pack word should work ok.
  -enumerate the specific subset of instructions for frontend.
  -start working from backend and moving up for implementing hardware stuff.
  -work with the simple ir's, basically ssa, working with primitive not object.
  -start with ssa and work down and up from there.
  -look at word based things in ssa.
* google hangout <2013-07-10 Wed>
  QUESTIONS: adding Ymm register stuff to amd64 codegen
  -alias the ymm registers to the xmm registers
  -keep just xmm register structure and work on that
* google hangout <2013-07-12 Fri>
  -primitives, start at prim.sig/fun & ast is where typedefs are
  -ssa is where to start recoginizing the fact that my type is a primitive
  -simd_wordx & simd_realx are ok names
  -ast/ is where types are defined
  -put explict cast primitive for ints of different sizes
  -make debug compiles with exception trace histories
  -smlnj speeds up compilations

* google hangout <2013-07-16 Tue>
  -runtime stuff, look at real-opts.h and word-opts.h and write simd
  versions of that
  -in prim-tycons i need to add vals simdReal and simdReals so than I can
  fix hash-type.fun
  -Also might want to look at type-opts,atoms and ast-atoms.sig/fun 

* google hangout <2013-07-19 Fri>
  -probably easiest to use 6 distint c-types
  -Its ok to use the distinct types
  -pass simd types not pointers
  -look at machine il for adding simd types for c-codegen
  -"registers" in machine il are just c-types
  -MLTON_CODEGEN_STATIC_INLINE is literally static inline
* google hangout <2013-07-23 Tue>
  -Ask about layout, how to deal with opcode suffixes etc
  -Ask about a way to make sml Arrays behave like c pointers
  -REALLY need to ask above, I kinda really need pointer arathmatic
     or something similar
  -packReal and packWord, use a primitive Word8Array type thing
  -Add a Word8Array_subSimd primitive
  -add primitive stuff to the basis library(make basis-library/simd &
      add a file primitives/simd-prim.sml
Word8_subSIMD of SimdRealSize.t
val Word8_subSIMD_f32v4 : Word8.word array * ArraySeqInt.t -> f32v4
_import "Real64Array_subSIMD" : Real64.real array * int -> v4f64
* Low level details
** Immediate opperands
*** Compairson
#+BEGIN_SRC C
/* Compare predicates for scalar and packed compare intrinsics. In AVX */

/* Equal (ordered, non-signaling)  */
#define _CMP_EQ_OQ	0x00
/* Less-than (ordered, signaling)  */
#define _CMP_LT_OS	0x01
/* Less-than-or-equal (ordered, signaling)  */
#define _CMP_LE_OS	0x02
/* Unordered (non-signaling)  */
#define _CMP_UNORD_Q	0x03
/* Not-equal (unordered, non-signaling)  */
#define _CMP_NEQ_UQ	0x04
/* Not-less-than (unordered, signaling)  */
#define _CMP_NLT_US	0x05
/* Not-less-than-or-equal (unordered, signaling)  */
#define _CMP_NLE_US	0x06
/* Ordered (nonsignaling)   */
#define _CMP_ORD_Q	0x07
/* Equal (unordered, non-signaling)  */
#define _CMP_EQ_UQ	0x08
/* Not-greater-than-or-equal (unordered, signaling)  */
#define _CMP_NGE_US	0x09
/* Not-greater-than (unordered, signaling)  */
#define _CMP_NGT_US	0x0a
/* False (ordered, non-signaling)  */
#define _CMP_FALSE_OQ	0x0b
/* Not-equal (ordered, non-signaling)  */
#define _CMP_NEQ_OQ	0x0c
/* Greater-than-or-equal (ordered, signaling)  */
#define _CMP_GE_OS	0x0d
/* Greater-than (ordered, signaling)  */
#define _CMP_GT_OS	0x0e
/* True (unordered, non-signaling)  */
#define _CMP_TRUE_UQ	0x0f
/* Equal (ordered, signaling)  */
#define _CMP_EQ_OS	0x10
/* Less-than (ordered, non-signaling)  */
#define _CMP_LT_OQ	0x11
/* Less-than-or-equal (ordered, non-signaling)  */
#define _CMP_LE_OQ	0x12
/* Unordered (signaling)  */
#define _CMP_UNORD_S	0x13
/* Not-equal (unordered, signaling)  */
#define _CMP_NEQ_US	0x14
/* Not-less-than (unordered, non-signaling)  */
#define _CMP_NLT_UQ	0x15
/* Not-less-than-or-equal (unordered, non-signaling)  */
#define _CMP_NLE_UQ	0x16
/* Ordered (signaling)  */
#define _CMP_ORD_S	0x17
/* Equal (unordered, signaling)  */
#define _CMP_EQ_US	0x18
/* Not-greater-than-or-equal (unordered, non-signaling)  */
#define _CMP_NGE_UQ	0x19
/* Not-greater-than (unordered, non-signaling)  */
#define _CMP_NGT_UQ	0x1a
/* False (ordered, signaling)  */
#define _CMP_FALSE_OS	0x1b
/* Not-equal (ordered, signaling)  */
#define _CMP_NEQ_OS	0x1c
/* Greater-than-or-equal (ordered, non-signaling)  */
#define _CMP_GE_OQ	0x1d
/* Greater-than (ordered, non-signaling)  */
#define _CMP_GT_OQ	0x1e
/* True (unordered, signaling)  */
#define _CMP_TRUE_US	0x1f
#+END_SRC
*** Compairson table
| Predicate       | imm8          | Description               | Result:                   | A               | Is             | 1st   | Operand, | B     | Is    | 2nd | Operand | Signals | #IA |
| Value           | 1             | on                        | QNAN                      |                 |                |       |          |       |       |     |         |         |     |
| A               | >B            | A<B                       | A=B                       | Unordered       |                |       |          |       |       |     |         |         |     |
| EQ_OQ           | (EQ)          | 0H                        | Equal                     | (ordered,       | non-signaling) | False | False    | True  | False | No  |         |         |     |
| LT_OS           | (LT)          | 1H                        | Less-than                 | (ordered,       | signaling)     | False | True     | False | False | Yes |         |         |     |
| LE_OS           | (LE)          | 2H                        | Less-than-or-equal        | (ordered,       | False          | True  | True     | False | Yes   |     |         |         |     |
| signaling)      |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| UNORD_Q         | 3H            | Unordered                 | (non-signaling)           | False           | False          | False | True     | No    |       |     |         |         |     |
| (UNORD)         |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| NEQ_UQ          | (NEQ)         | 4H                        | Not-equal                 | (unordered,     | non-           | True  | True     | False | True  | No  |         |         |     |
| signaling)      |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| NLT_US          | (NLT)         | 5H                        | Not-less-than             | (unordered,     | signaling)     | True  | False    | True  | True  | Yes |         |         |     |
| NLE_US          | (NLE)         | 6H                        | Not-less-than-or-equal    | (unordered,     | True           | False | False    | True  | Yes   |     |         |         |     |
| signaling)      |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| ORD_Q           | (ORD)         | 7H                        | Ordered                   | (non-signaling) | True           | True  | True     | False | No    |     |         |         |     |
| EQ_UQ           | 8H            | Equal                     | (unordered,               | non-signaling)  | False          | False | True     | True  | No    |     |         |         |     |
| NGE_US          | (NGE)         | 9H                        | Not-greater-than-or-equal | False           | True           | False | True     | Yes   |       |     |         |         |     |
| (unordered,     | signaling)    |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| NGT_US          | (NGT)         | AH                        | Not-greater-than          | (unordered,     | sig-           | False | True     | True  | True  | Yes |         |         |     |
| naling)         |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| FALSE_OQ(FALSE) | BH            | False                     | (ordered,                 | non-signaling)  | False          | False | False    | False | No    |     |         |         |     |
| NEQ_OQ          | CH            | Not-equal                 | (ordered,                 | non-signaling)  | True           | True  | False    | False | No    |     |         |         |     |
| GE_OS           | (GE)          | DH                        | Greater-than-or-equal     | (ordered,       | sig-           | True  | False    | True  | False | Yes |         |         |     |
| naling)         |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| GT_OS           | (GT)          | EH                        | Greater-than              | (ordered,       | signaling)     | True  | False    | False | False | Yes |         |         |     |
| TRUE_UQ(TRUE)   | FH            | True                      | (unordered,               | non-signaling)  | True           | True  | True     | True  | No    |     |         |         |     |
| EQ_OS           | 10H           | Equal                     | (ordered,                 | signaling)      | False          | False | True     | False | Yes   |     |         |         |     |
| LT_OQ           | 11H           | Less-than                 | (ordered,                 | nonsignaling)   | False          | True  | False    | False | No    |     |         |         |     |
| LE_OQ           | 12H           | Less-than-or-equal        | (ordered,                 | non-            | False          | True  | True     | False | No    |     |         |         |     |
| signaling)      |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| UNORD_S         | 13H           | Unordered                 | (signaling)               | False           | False          | False | True     | Yes   |       |     |         |         |     |
| NEQ_US          | 14H           | Not-equal                 | (unordered,               | signaling)      | True           | True  | False    | True  | Yes   |     |         |         |     |
| NLT_UQ          | 15H           | Not-less-than             | (unordered,               | nonsig-         | True           | False | True     | True  | No    |     |         |         |     |
| naling)         |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| NLE_UQ          | 16H           | Not-less-than-or-equal    | (unordered,               | True            | False          | False | True     | No    |       |     |         |         |     |
| nonsignaling)   |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| ORD_S           | 17H           | Ordered                   | (signaling)               | True            | True           | True  | False    | Yes   |       |     |         |         |     |
| EQ_US           | 18H           | Equal                     | (unordered,               | signaling)      | False          | False | True     | True  | Yes   |     |         |         |     |
| Predicate       | imm8          | Description               | Result:                   | A               | Is             | 1st   | Operand, | B     | Is    | 2nd | Operand | Signals | #IA |
| Value           | on            | QNAN                      |                           |                 |                |       |          |       |       |     |         |         |     |
| A               | >B            | A<B                       | A=B                       | Unordered1      |                |       |          |       |       |     |         |         |     |
| NGE_UQ          | 19H           | Not-greater-than-or-equal | (unor-                    | False           | True           | False | True     | No    |       |     |         |         |     |
| dered,          | nonsignaling) |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| NGT_UQ          | 1AH           | Not-greater-than          | (unordered,               | non-            | False          | True  | True     | True  | No    |     |         |         |     |
| signaling)      |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| FALSE_OS        | 1BH           | False                     | (ordered,                 | signaling)      | False          | False | False    | False | Yes   |     |         |         |     |
| NEQ_OS          | 1CH           | Not-equal                 | (ordered,                 | signaling)      | True           | True  | False    | False | Yes   |     |         |         |     |
| GE_OQ           | 1DH           | Greater-than-or-equal     | (ordered,                 | True            | False          | True  | False    | No    |       |     |         |         |     |
| nonsignaling)   |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| GT_OQ           | 1EH           | Greater-than              | (ordered,                 | nonsignal-      | True           | False | False    | False | No    |     |         |         |     |
| ing)            |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| TRUE_US         | 1FH           | True                      | (unordered,               | signaling)      | True           | True  | True     | True  | Yes   |     |         |         |     |
* Sml snippets
** Software vector function
#+BEGIN_SRC 
  local
    open Vector
  in
    fun vectorFun (a,b,vecOp,n) = let
      val f = fn x =>vecOp(sub(a,x),sub(b,x))
    in tabulate f n end
  end
#+END_SRC


* Compiler Warnings <2013-07-23 Tue>

Warning: atoms/prim.fun 1127.8.
  Unused variable: simdRealcmp.

Warning: atoms/prim.fun 1546.27.
  Unused variable: c.
Warning: atoms/type-ops.fun 22.6.
  Unused type: simdRealSize.
Warning: backend/packed-representation.fun 30.14.
  Unused structure: SimdRealSize.

Warning: backend/rep-type.fun 669.27.
  Unused variable: w.

Warning: codegen/amd64-codegen/amd64-mlton.fun 581.13.
  Unused variable: sse_imov.
Warning: codegen/amd64-codegen/amd64-mlton.fun 871.13.
  Unused variable: sse_ibinap.
Warning: codegen/amd64-codegen/amd64-mlton.fun 930.26.
  Unused variable: src2size.
Warning: codegen/amd64-codegen/amd64.fun 1814.16.
  Unused variable: SSE_RCPPS.
Warning: codegen/amd64-codegen/amd64.fun 1815.16.
  Unused variable: SSE_RSQRTPS.
Warning: codegen/amd64-codegen/amd64.fun 1866.11.
  Unused variable: sse_shuffp_layout.

Warning: codegen/amd64-codegen/amd64.fun 1944.11.
  Unused variable: sse_imov_layout.
Warning: codegen/amd64-codegen/amd64.fun 1963.11.
  Unused variable: sse_pmd_layout.

Warning: codegen/amd64-codegen/amd64.fun 1983.11.
  Unused variable: ssse3_ibinap_layout.
Warning: codegen/amd64-codegen/amd64.fun 2002.11.
  Unused variable: sse_ibinlp_layout.
	 deadCode starting
	 deadCode finished in 0.14 + 0.00 (0% GC)
	 defunctorize starting
Warning: atoms/prim.fun 256.7.
  Case has redundant rules.
    rules: CPointer_setObjptr => "CPointer_setObjptr"
	   CPointer_setReal s => cpointerSet  ...  RealSize.toString s)
	   CPointer_setSimdReal s => cpointe  ...  ize.toStringReal s])
	   CPointer_setWord s => cpointerSet  ...  WordSize.toString s)
	   CPointer_sub => "CPointer_sub"
	   CPointer_toWord => "CPointer_toWord"
	   Exn_extra => "Exn_extra"
	   Exn_name => "Exn_name"
	   Exn_setExtendExtra => "Exn_setExtendExtra"
	   FFI f => (CFunction.Target.toString o CFunction.target) f
	   FFI_Symbol {name, ...} => name
	   GC_collect => "GC_collect"
	   IntInf_add => "IntInf_add"
	   IntInf_andb => "IntInf_andb"
	   IntInf_arshift => "IntInf_arshift"
	   IntInf_compare => "IntInf_compare"
	   IntInf_equal => "IntInf_equal"
	   IntInf_gcd => "IntInf_gcd"
	   IntInf_lshift => "IntInf_lshift"
	   IntInf_mul => "IntInf_mul"
	   IntInf_neg => "IntInf_neg"
	   IntInf_notb => "IntInf_notb"
	   IntInf_orb => "IntInf_orb"
	   IntInf_quot => "IntInf_quot"
	   IntInf_rem => "IntInf_rem"
	   IntInf_sub => "IntInf_sub"
	   IntInf_toString => "IntInf_toString"
	   IntInf_toVector => "IntInf_toVector"
	   IntInf_toWord => "IntInf_toWord"
	   IntInf_xorb => "IntInf_xorb"
	   MLton_bogus => "MLton_bogus"
	   MLton_bug => "MLton_bug"
	   MLton_deserialize => "MLton_deserialize"
	   MLton_eq => "MLton_eq"
	   MLton_equal => "MLton_equal"
	   MLton_halt => "MLton_halt"
	   MLton_hash => "MLton_hash"
	   MLton_handlesSignals => "MLton_handlesSignals"
	   MLton_installSignalHandler => "MLton_installSignalHandler"
	   MLton_serialize => "MLton_serialize"
	   MLton_share => "MLton_share"
	   MLton_size => "MLton_size"
	   MLton_touch => "MLton_touch"
	   Real_Math_acos s => real (s, "Math_acos")
	   Real_Math_asin s => real (s, "Math_asin")
	   Real_Math_atan s => real (s, "Math_atan")
	   Real_Math_atan2 s => real (s, "Math_atan2")
	   Real_Math_cos s => real (s, "Math_cos")
	   Real_Math_exp s => real (s, "Math_exp")
	   Real_Math_ln s => real (s, "Math_ln")
	   Real_Math_log10 s => real (s, "Math_log10")
	   Real_Math_sin s => real (s, "Math_sin")
	   Real_Math_sqrt s => real (s, "Math_sqrt")
	   Real_Math_tan s => real (s, "Math_tan")
	   Real_abs s => real (s, "abs")
	   Real_add s => real (s, "add")
	   Real_castToWord (s1, s2) => cast (realC, wordC, s1, s2)
	   Real_div s => real (s, "div")
	   Real_equal s => real (s, "equal")
	   Real_ldexp s => real (s, "ldexp")
	   Real_le s => real (s, "le")
	   Real_lt s => real (s, "lt")
	   Real_mul s => real (s, "mul")
	   Real_muladd s => real (s, "muladd")
	   Real_mulsub s => real (s, "mulsub")
	   Real_neg s => real (s, "neg")
	   Real_qequal s => real (s, "qequal")
	   Real_rndToReal (s1, s2) => rnd (realC, realC, s1, s2)
	   Real_rndToWord (s1, s2, sg) => rn  ...  , wordCS sg, s1, s2)
	   Real_round s => real (s, "round")
	   Real_sub s => real (s, "sub")
	   Ref_assign => "Ref_assign"
	   Ref_deref => "Ref_deref"
	   Ref_ref => "Ref_ref"
	   Simd_Real_add s => simd_real (s, "add")
	   Simd_Real_sub s => simd_real (s, "sub")
	   Simd_Real_mul s => simd_real (s, "mul")
	   Simd_Real_div s => simd_real (s, "div")
	   Simd_Real_max s => simd_real (s, "max")
	   Simd_Real_min s => simd_real (s, "min")
	   Simd_Real_sqrt s => simd_real (s, "sqrt")
	   Simd_Real_and s => simd_real (s, "and")
	   Simd_Real_andn s => simd_real (s, "andn")
	   Simd_Real_or s => simd_real (s, "or")
	   Simd_Real_xor s => simd_real (s, "xor")
	   Simd_Real_hadd s => simd_real (s, "hadd")
	   Simd_Real_hsub s => simd_real (s, "hsub")
	   Simd_Real_addsub s => simd_real (s, "addsub")
	   Simd_Real_cmp (s, c) => simd_real  ...  ealSize.cmpString c)
	   Simd_Real_fromScalar s => simd_real (s, "loads")
	   Simd_Real_toScalar s => simd_real (s, "stores")
	   Simd_Real_fromArray s => simd_real (s, "load")
	   Simd_Real_toArray s => simd_real (s, "store")
	   String_toWord8Vector => "String_toWord8Vector"
	   Thread_atomicBegin => "Thread_atomicBegin"
	   Thread_atomicEnd => "Thread_atomicEnd"
	   Thread_atomicState => "Thread_atomicState"
	   Thread_copy => "Thread_copy"
	   Thread_copyCurrent => "Thread_copyCurrent"
	   Thread_returnToC => "Thread_returnToC"
	   Thread_switchTo => "Thread_switchTo"
	   TopLevel_getHandler => "TopLevel_getHandler"
	   TopLevel_getSuffix => "TopLevel_getSuffix"
	   TopLevel_setHandler => "TopLevel_setHandler"
	   TopLevel_setSuffix => "TopLevel_setSuffix"
	   Vector_length => "Vector_length"
	   Vector_sub => "Vector_sub"
	   Weak_canGet => "Weak_canGet"
	   Weak_get => "Weak_get"
	   Weak_new => "Weak_new"
	   Word8Array_subWord w => word8Seq ("Array", "sub", w)
	   Word8Array_updateWord w => word8Seq ("Array", "update", w)
	   Word8Vector_subWord w => word8Seq ("Vector", "sub", w)
	   Word8Vector_toString => "Word8Vector_toString"
	   WordVector_toIntInf => "WordVector_toIntInf"
	   Word_add s => word (s, "add")
	   Word_addCheck (s, sg) => wordS (s, sg, "addCheck")
	   Word_andb s => word (s, "andb")
	   Word_castToReal (s1, s2) => cast (wordC, realC, s1, s2)
	   Word_equal s => word (s, "equal")
	   Word_extdToWord (s1, s2, sg) => e  ...  S sg, wordC, s1, s2)
	   Word_lshift s => word (s, "lshift")
	   Word_lt (s, sg) => wordS (s, sg, "lt")
	   Word_mul (s, sg) => wordS (s, sg, "mul")
	   Word_mulCheck (s, sg) => wordS (s, sg, "mulCheck")
	   Word_neg s => word (s, "neg")
	   Word_negCheck s => word (s, "negCheck")
	   Word_notb s => word (s, "notb")
	   Word_orb s => word (s, "orb")
	   Word_quot (s, sg) => wordS (s, sg, "quot")
	   Word_rem (s, sg) => wordS (s, sg, "rem")
	   Word_rndToReal (s1, s2, sg) => rn  ...  S sg, realC, s1, s2)
	   Word_rol s => word (s, "rol")
	   Word_ror s => word (s, "ror")
	   Word_rshift (s, sg) => wordS (s, sg, "rshift")
	   Word_sub s => word (s, "sub")
	   Word_subCheck (s, sg) => wordS (s, sg, "subCheck")
	   Word_toIntInf => "Word_toIntInf"
	   Word_xorb s => word (s, "xorb")
	   World_save => "World_save"
    in: case n of Array_array => "Array_a  ...  save => "World_save"

Warning: atoms/prim.fun 1394.11.
  Function has redundant rules.
    rules: V128R64 => RealSize.R64
	   V256R32 => RealSize.R32
	   V256R64 => RealSize.R64
    in: fn V128R32 => RealSize.R32 | V128  ...  6R64 => RealSize.R64

Warning: ssa/poly-hash.fun 522.16.
  Case is not exhaustive.
    missing pattern: (SimdReal _)
    in: case Type.dest ty of (Type.Array   ...  Bytes (dst, dx, ws))


Warning: backend/rep-type.fun 575.12.
  Function has redundant rules.
    rules: V128R64 => RealSize.R64
	   V256R32 => RealSize.R32
	   V256R64 => RealSize.R64
    in: fn V128R32 => RealSize.R32 | V128  ...  6R64 => RealSize.R64


Warning: codegen/x86-codegen/x86.fun 104.13.
  Case is not exhaustive.
    missing pattern: Simd128_Real32 | Simd128_Real64 | Simd128_WordX | Simd256_Real32 | Simd256_Real64 | Simd256_WordX
    in: case t of CPointer => (Vector.new  ...  r.new2 (LONG, LONG))
Warning: codegen/x86-codegen/x86.fun 480.13.
  Case is not exhaustive.
    missing pattern: Simd128_Real32 | Simd128_Real64 | Simd128_WordX | Simd256_Real32 | Simd256_Real64 | Simd256_WordX
    in: case t of CPointer => Four | Int8  ...  ur | Word64 => Eight
Warning: codegen/x86-codegen/x86.fun 1245.19.
  Case is not exhaustive.
    missing pattern: Simd128_Real32 | Simd128_Real64 | Simd128_WordX | Simd256_Real32 | Simd256_Real64 | Simd256_WordX
    in: case RepType.toCType ty of CPoint  ...   w32 | Word64 => w64
Warning: codegen/x86-codegen/x86-mlton-basic.fun 306.13.
  Case is not exhaustive.
    missing pattern: Simd128_Real32 | Simd128_Real64 | Simd128_WordX | Simd256_Real32 | Simd256_Real64 | Simd256_WordX
    in: case t of CPointer => (Label.from  ...  | Word64 => (w "64")



Warning: codegen/amd64-codegen/amd64.fun 2384.16.
  Function is not exhaustive.
    missing pattern: (SSE_IMOV _) | (SSE_BLENDVP _)
    in: fn NOP => (str "nop") | HLT => (s  ...  Operand.layout dst))
Warning: codegen/amd64-codegen/amd64.fun 2635.14.
  Function is not exhaustive.
    missing pattern: (SSE_BLENDVP _)
    in: fn NOP => {uses = [], defs = [],   ...  = [dst], kills = []}
Warning: codegen/amd64-codegen/amd64.fun 2926.14.
  Function is not exhaustive.
    missing pattern: (SSE_MOVFP _) | (SSE_IMOV _) | (SSE_BLENDVP _)
    in: fn NOP => {srcs = NONE, dsts = NO  ...  , dsts = SOME [dst]}
Warning: codegen/amd64-codegen/amd64.fun 3081.14.
  Function is not exhaustive.
    missing pattern: (SSE_MOVFP _) | (SSE_IMOV _) | (SSE_BLENDVP _)
    in: fn NOP => NOP | HLT => HLT | (Bin  ...   dstsize = dstsize})
Warning: codegen/amd64-codegen/amd64-mlton-basic.fun 247.13.
  Case has redundant rules.
    rules: Simd256 => v "256"
    in: case t of CPointer => (Label.from  ...  Simd256 => (v "256")
Warning: codegen/amd64-codegen/amd64-mlton.fun 1472.16.
  Case is not exhaustive.
    missing pattern: V256R32 | V256R64
    in: case s of V128R32 => (sse_movfp I  ...  struction.SSE_MOVSD)
Warning: codegen/amd64-codegen/amd64-mlton.fun 1468.16.
  Case is not exhaustive.
    missing pattern: V256R32 | V256R64
    in: case s of V128R32 => (sse_movfp I  ...  truction.SSE_MOVUPD)
Warning: codegen/amd64-codegen/amd64-mlton.fun 1464.16.
  Case is not exhaustive.
    missing pattern: V256R32 | V256R64
    in: case s of V128R32 => (sse_movfp I  ...  truction.SSE_MOVUPD)
Warning: codegen/amd64-codegen/amd64-mlton.fun 1460.16.
  Case is not exhaustive.
    missing pattern: V256R32 | V256R64
    in: case s of V128R32 => (sse_movfp I  ...  truction.SSE_MOVUPD)
Warning: codegen/amd64-codegen/amd64-mlton.fun 1445.16.
  Case is not exhaustive.
    missing pattern: V256R32 | V256R64
    in: case s of V128R32 => (sse_cmpfp (  ...   (Bits.fromInt 8))))
Warning: codegen/amd64-codegen/amd64-mlton.fun 1439.16.
  Case is not exhaustive.
    missing pattern: V256R32 | V256R64
    in: case s of V128R32 => (sse3_binap   ...  ruction.SSE_MOVUPD))
Warning: codegen/amd64-codegen/amd64-mlton.fun 1433.16.
  Case is not exhaustive.
    missing pattern: V256R32 | V256R64
    in: case s of V128R32 => (sse3_binap   ...  ruction.SSE_MOVUPD))
Warning: codegen/amd64-codegen/amd64-mlton.fun 1427.16.
  Case is not exhaustive.
    missing pattern: V256R32 | V256R64
    in: case s of V128R32 => (sse3_binap   ...  ruction.SSE_MOVUPD))
Warning: codegen/amd64-codegen/amd64-mlton.fun 1421.16.
  Case is not exhaustive.
    missing pattern: V256R32 | V256R64
    in: case s of V128R32 => (sse_binlp (  ...  ruction.SSE_MOVUPD))
Warning: codegen/amd64-codegen/amd64-mlton.fun 1415.16.
  Case is not exhaustive.
    missing pattern: V256R32 | V256R64
    in: case s of V128R32 => (sse_binlp (  ...  ruction.SSE_MOVUPD))
Warning: codegen/amd64-codegen/amd64-mlton.fun 1409.16.
  Case is not exhaustive.
    missing pattern: V256R32 | V256R64
    in: case s of V128R32 => (sse_binlp (  ...  ruction.SSE_MOVUPD))
Warning: codegen/amd64-codegen/amd64-mlton.fun 1403.16.
  Case is not exhaustive.
    missing pattern: V256R32 | V256R64
    in: case s of V128R32 => (sse_binlp (  ...  ruction.SSE_MOVUPD))
Warning: codegen/amd64-codegen/amd64-mlton.fun 1397.16.
  Case is not exhaustive.
    missing pattern: V256R32 | V256R64
    in: case s of V128R32 => (sse_unap In  ...  truction.SSE_SQRTPD)
Warning: codegen/amd64-codegen/amd64-mlton.fun 1391.16.
  Case is not exhaustive.
    missing pattern: V256R32 | V256R64
    in: case s of V128R32 => (sse_binap (  ...  ruction.SSE_MOVUPD))
Warning: codegen/amd64-codegen/amd64-mlton.fun 1385.16.
  Case is not exhaustive.
    missing pattern: V256R32 | V256R64
    in: case s of V128R32 => (sse_binap (  ...  ruction.SSE_MOVUPD))
Warning: codegen/amd64-codegen/amd64-mlton.fun 1379.16.
  Case is not exhaustive.
    missing pattern: V256R32 | V256R64
    in: case s of V128R32 => (sse_binap (  ...  ruction.SSE_MOVUPD))
Warning: codegen/amd64-codegen/amd64-mlton.fun 1373.16.
  Case is not exhaustive.
    missing pattern: V256R32 | V256R64
    in: case s of V128R32 => (sse_binap (  ...  ruction.SSE_MOVUPD))
Warning: codegen/amd64-codegen/amd64-mlton.fun 1367.16.
  Case is not exhaustive.
    missing pattern: V256R32 | V256R64
    in: case s of V128R32 => (sse_binap (  ...  ruction.SSE_MOVUPD))
Warning: codegen/amd64-codegen/amd64-mlton.fun 1357.16.
  Case is not exhaustive.
    missing pattern: V256R32 | V256R64
    in: case s of V128R32 => (sse_binap (  ...  ruction.SSE_MOVUPD))
