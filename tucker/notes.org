* google hangout <2013-06-11 Tue>
  -bracket intresting stuff with ffi calls to find them in intermediate files
  -functon order can get reversed in different passes
  -names are not mangled too much in intermediate code
  -implement 2 vector types words and reals with a parameter of number elements and a parametr of element size
  -look at codegen prim predicate, that checks if an opperation is
  supported
* google hangout <2013-06-14 Fri>
-asserts in mlton/lib/basic, use for testing
-functor calls get expanded, so try to share code explictly
-handle generic code
-datatype of vectorop
* google hangout <2013-06-18 Tue>
  -alignment question
  -Vector primitive needs to be written
  -I need to do this myself (woo?)
    -Atoms.prims is first place to look
    -then look at places its used
    -then goto basis lib primitives and instantiate it there
    -Array0Const is a good place to look for an 
  -MLton has an unsafe array to vector conversion
  -Compairsons both bool and actual int/float values

  -Functors for type paramiterization is a good idea, just be sure to
  share the code that does the backend work
* google hangout <2013-06-21 Fri>
  -Might be some predefined objects aligned to 8 byte boundries
  -Also look at the runtime stuff, thats probably the issue
  -basis lib unsafe.mlb to create uninitalized array
  -compare c calls to c calls, i.e. c-simd call vs c-for loop

* google hangout <2013-07-03 Wed>
  -want something like word128 ! ! !
  -this is important for performance.
  -tuples are tricky.
  -pack word should work ok.
  -enumerate the specific subset of instructions for frontend.
  -start working from backend and moving up for implementing hardware stuff.
  -work with the simple ir's, basically ssa, working with primitive not object.
  -start with ssa and work down and up from there.
  -look at word based things in ssa.
* google hangout <2013-07-10 Wed>
  QUESTIONS: adding Ymm register stuff to amd64 codegen
  -alias the ymm registers to the xmm registers
  -keep just xmm register structure and work on that
* google hangout <2013-07-12 Fri>
  -primitives, start at prim.sig/fun & ast is where typedefs are
  -ssa is where to start recoginizing the fact that my type is a primitive
  -simd_wordx & simd_realx are ok names
  -ast/ is where types are defined
  -put explict cast primitive for ints of different sizes
  -make debug compiles with exception trace histories
  -smlnj speeds up compilations

* google hangout <2013-07-16 Tue>
  -runtime stuff, look at real-opts.h and word-opts.h and write simd
  versions of that
  -in prim-tycons i need to add vals simdReal and simdReals so than I can
  fix hash-type.fun
  -Also might want to look at type-opts,atoms and ast-atoms.sig/fun 

* google hangout <2013-07-19 Fri>
  -probably easiest to use 6 distint c-types
  -Its ok to use the distinct types
  -pass simd types not pointers
  -look at machine il for adding simd types for c-codegen
  -"registers" in machine il are just c-types
  -MLTON_CODEGEN_STATIC_INLINE is literally static inline
* Low level details
** Immediate opperands
*** Compairson
#+BEGIN_SRC C
/* Compare predicates for scalar and packed compare intrinsics. In AVX */

/* Equal (ordered, non-signaling)  */
#define _CMP_EQ_OQ	0x00
/* Less-than (ordered, signaling)  */
#define _CMP_LT_OS	0x01
/* Less-than-or-equal (ordered, signaling)  */
#define _CMP_LE_OS	0x02
/* Unordered (non-signaling)  */
#define _CMP_UNORD_Q	0x03
/* Not-equal (unordered, non-signaling)  */
#define _CMP_NEQ_UQ	0x04
/* Not-less-than (unordered, signaling)  */
#define _CMP_NLT_US	0x05
/* Not-less-than-or-equal (unordered, signaling)  */
#define _CMP_NLE_US	0x06
/* Ordered (nonsignaling)   */
#define _CMP_ORD_Q	0x07
/* Equal (unordered, non-signaling)  */
#define _CMP_EQ_UQ	0x08
/* Not-greater-than-or-equal (unordered, signaling)  */
#define _CMP_NGE_US	0x09
/* Not-greater-than (unordered, signaling)  */
#define _CMP_NGT_US	0x0a
/* False (ordered, non-signaling)  */
#define _CMP_FALSE_OQ	0x0b
/* Not-equal (ordered, non-signaling)  */
#define _CMP_NEQ_OQ	0x0c
/* Greater-than-or-equal (ordered, signaling)  */
#define _CMP_GE_OS	0x0d
/* Greater-than (ordered, signaling)  */
#define _CMP_GT_OS	0x0e
/* True (unordered, non-signaling)  */
#define _CMP_TRUE_UQ	0x0f
/* Equal (ordered, signaling)  */
#define _CMP_EQ_OS	0x10
/* Less-than (ordered, non-signaling)  */
#define _CMP_LT_OQ	0x11
/* Less-than-or-equal (ordered, non-signaling)  */
#define _CMP_LE_OQ	0x12
/* Unordered (signaling)  */
#define _CMP_UNORD_S	0x13
/* Not-equal (unordered, signaling)  */
#define _CMP_NEQ_US	0x14
/* Not-less-than (unordered, non-signaling)  */
#define _CMP_NLT_UQ	0x15
/* Not-less-than-or-equal (unordered, non-signaling)  */
#define _CMP_NLE_UQ	0x16
/* Ordered (signaling)  */
#define _CMP_ORD_S	0x17
/* Equal (unordered, signaling)  */
#define _CMP_EQ_US	0x18
/* Not-greater-than-or-equal (unordered, non-signaling)  */
#define _CMP_NGE_UQ	0x19
/* Not-greater-than (unordered, non-signaling)  */
#define _CMP_NGT_UQ	0x1a
/* False (ordered, signaling)  */
#define _CMP_FALSE_OS	0x1b
/* Not-equal (ordered, signaling)  */
#define _CMP_NEQ_OS	0x1c
/* Greater-than-or-equal (ordered, non-signaling)  */
#define _CMP_GE_OQ	0x1d
/* Greater-than (ordered, non-signaling)  */
#define _CMP_GT_OQ	0x1e
/* True (unordered, signaling)  */
#define _CMP_TRUE_US	0x1f
#+END_SRC
*** Compairson table
| Predicate       | imm8          | Description               | Result:                   | A               | Is             | 1st   | Operand, | B     | Is    | 2nd | Operand | Signals | #IA |
| Value           | 1             | on                        | QNAN                      |                 |                |       |          |       |       |     |         |         |     |
| A               | >B            | A<B                       | A=B                       | Unordered       |                |       |          |       |       |     |         |         |     |
| EQ_OQ           | (EQ)          | 0H                        | Equal                     | (ordered,       | non-signaling) | False | False    | True  | False | No  |         |         |     |
| LT_OS           | (LT)          | 1H                        | Less-than                 | (ordered,       | signaling)     | False | True     | False | False | Yes |         |         |     |
| LE_OS           | (LE)          | 2H                        | Less-than-or-equal        | (ordered,       | False          | True  | True     | False | Yes   |     |         |         |     |
| signaling)      |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| UNORD_Q         | 3H            | Unordered                 | (non-signaling)           | False           | False          | False | True     | No    |       |     |         |         |     |
| (UNORD)         |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| NEQ_UQ          | (NEQ)         | 4H                        | Not-equal                 | (unordered,     | non-           | True  | True     | False | True  | No  |         |         |     |
| signaling)      |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| NLT_US          | (NLT)         | 5H                        | Not-less-than             | (unordered,     | signaling)     | True  | False    | True  | True  | Yes |         |         |     |
| NLE_US          | (NLE)         | 6H                        | Not-less-than-or-equal    | (unordered,     | True           | False | False    | True  | Yes   |     |         |         |     |
| signaling)      |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| ORD_Q           | (ORD)         | 7H                        | Ordered                   | (non-signaling) | True           | True  | True     | False | No    |     |         |         |     |
| EQ_UQ           | 8H            | Equal                     | (unordered,               | non-signaling)  | False          | False | True     | True  | No    |     |         |         |     |
| NGE_US          | (NGE)         | 9H                        | Not-greater-than-or-equal | False           | True           | False | True     | Yes   |       |     |         |         |     |
| (unordered,     | signaling)    |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| NGT_US          | (NGT)         | AH                        | Not-greater-than          | (unordered,     | sig-           | False | True     | True  | True  | Yes |         |         |     |
| naling)         |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| FALSE_OQ(FALSE) | BH            | False                     | (ordered,                 | non-signaling)  | False          | False | False    | False | No    |     |         |         |     |
| NEQ_OQ          | CH            | Not-equal                 | (ordered,                 | non-signaling)  | True           | True  | False    | False | No    |     |         |         |     |
| GE_OS           | (GE)          | DH                        | Greater-than-or-equal     | (ordered,       | sig-           | True  | False    | True  | False | Yes |         |         |     |
| naling)         |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| GT_OS           | (GT)          | EH                        | Greater-than              | (ordered,       | signaling)     | True  | False    | False | False | Yes |         |         |     |
| TRUE_UQ(TRUE)   | FH            | True                      | (unordered,               | non-signaling)  | True           | True  | True     | True  | No    |     |         |         |     |
| EQ_OS           | 10H           | Equal                     | (ordered,                 | signaling)      | False          | False | True     | False | Yes   |     |         |         |     |
| LT_OQ           | 11H           | Less-than                 | (ordered,                 | nonsignaling)   | False          | True  | False    | False | No    |     |         |         |     |
| LE_OQ           | 12H           | Less-than-or-equal        | (ordered,                 | non-            | False          | True  | True     | False | No    |     |         |         |     |
| signaling)      |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| UNORD_S         | 13H           | Unordered                 | (signaling)               | False           | False          | False | True     | Yes   |       |     |         |         |     |
| NEQ_US          | 14H           | Not-equal                 | (unordered,               | signaling)      | True           | True  | False    | True  | Yes   |     |         |         |     |
| NLT_UQ          | 15H           | Not-less-than             | (unordered,               | nonsig-         | True           | False | True     | True  | No    |     |         |         |     |
| naling)         |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| NLE_UQ          | 16H           | Not-less-than-or-equal    | (unordered,               | True            | False          | False | True     | No    |       |     |         |         |     |
| nonsignaling)   |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| ORD_S           | 17H           | Ordered                   | (signaling)               | True            | True           | True  | False    | Yes   |       |     |         |         |     |
| EQ_US           | 18H           | Equal                     | (unordered,               | signaling)      | False          | False | True     | True  | Yes   |     |         |         |     |
| Predicate       | imm8          | Description               | Result:                   | A               | Is             | 1st   | Operand, | B     | Is    | 2nd | Operand | Signals | #IA |
| Value           | on            | QNAN                      |                           |                 |                |       |          |       |       |     |         |         |     |
| A               | >B            | A<B                       | A=B                       | Unordered1      |                |       |          |       |       |     |         |         |     |
| NGE_UQ          | 19H           | Not-greater-than-or-equal | (unor-                    | False           | True           | False | True     | No    |       |     |         |         |     |
| dered,          | nonsignaling) |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| NGT_UQ          | 1AH           | Not-greater-than          | (unordered,               | non-            | False          | True  | True     | True  | No    |     |         |         |     |
| signaling)      |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| FALSE_OS        | 1BH           | False                     | (ordered,                 | signaling)      | False          | False | False    | False | Yes   |     |         |         |     |
| NEQ_OS          | 1CH           | Not-equal                 | (ordered,                 | signaling)      | True           | True  | False    | False | Yes   |     |         |         |     |
| GE_OQ           | 1DH           | Greater-than-or-equal     | (ordered,                 | True            | False          | True  | False    | No    |       |     |         |         |     |
| nonsignaling)   |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| GT_OQ           | 1EH           | Greater-than              | (ordered,                 | nonsignal-      | True           | False | False    | False | No    |     |         |         |     |
| ing)            |               |                           |                           |                 |                |       |          |       |       |     |         |         |     |
| TRUE_US         | 1FH           | True                      | (unordered,               | signaling)      | True           | True  | True     | True  | Yes   |     |         |         |     |
* Sml snippets
** Software vector function
#+BEGIN_SRC 
  local
    open Vector
  in
    fun vectorFun (a,b,vecOp,n) = let
      val f = fn x =>vecOp(sub(a,x),sub(b,x))
    in tabulate f n end
  end
#+END_SRC

* current compiler errors <2013-07-17 Wed>

	 defunctorize finished in 1.42 + 1.51 (52% GC)
	 xmlSimplify starting
	    typeCheck starting
	    typeCheck finished in 0.83 + 0.41 (33% GC)
	    xmlShrink starting
	    xmlShrink finished in 0.79 + 0.61 (44% GC)
	    xmlSimplifyTypes starting
	    xmlSimplifyTypes finished in 0.28 + 0.00 (0% GC)
	    typeCheck starting
	    typeCheck finished in 0.69 + 0.34 (33% GC)
	 xmlSimplify finished in 2.59 + 1.37 (35% GC)
	 monomorphise starting
	 monomorphise finished in 1.15 + 1.04 (47% GC)
	 sxmlSimplify starting
	    typeCheck starting
	    typeCheck finished in 0.65 + 0.36 (36% GC)
	    sxmlShrink1 starting
	    sxmlShrink1 finished in 1.12 + 3.50 (76% GC)
	    implementSuffix starting
	    implementSuffix finished in 0.04 + 0.00 (0% GC)
	    sxmlShrink2 starting
	    sxmlShrink2 finished in 0.91 + 0.00 (0% GC)
	    implementExceptions starting
	    implementExceptions finished in 0.12 + 0.00 (0% GC)
	    sxmlShrink3 starting
	    sxmlShrink3 finished in 0.91 + 0.42 (32% GC)
	    polyvariance starting
	       duplicate1 starting
	       duplicate1 finished in 1.51 + 1.50 (50% GC)
	       duplicate2 starting
	       duplicate2 finished in 1.45 + 1.47 (50% GC)
	    polyvariance finished in 2.96 + 2.97 (50% GC)
	    sxmlShrink4 starting
	    sxmlShrink4 finished in 1.10 + 1.27 (54% GC)
	    typeCheck starting
	    typeCheck finished in 0.45 + 0.45 (50% GC)
	 sxmlSimplify finished in 8.25 + 8.97 (52% GC)
	 closureConvert starting
	    flow analysis starting
	    flow analysis finished in 0.99 + 0.00 (0% GC)
	    free variables starting
	    free variables finished in 0.22 + 0.00 (0% GC)
	    globalize starting
	    globalize finished in 0.18 + 0.00 (0% GC)
	    convert starting
	    convert finished in 2.46 + 2.58 (51% GC)
	 closureConvert finished in 4.07 + 2.58 (39% GC)
	 ssaSimplify starting
	    typeCheck starting
	    typeCheck finished in 1.32 + 0.00 (0% GC)
	    removeUnused1 starting
	    removeUnused1 finished in 2.32 + 1.16 (33% GC)
	    introduceLoops1 starting
	    introduceLoops1 finished in 0.03 + 0.00 (0% GC)
	    loopInvariant1 starting
	    loopInvariant1 finished in 0.68 + 0.47 (41% GC)
	    inlineLeaf1 starting
	    inlineLeaf1 finished in 0.96 + 0.59 (38% GC)
	    inlineLeaf2 starting
	    inlineLeaf2 finished in 0.77 + 0.57 (42% GC)
	    contify1 starting
	    contify1 finished in 0.66 + 0.00 (0% GC)
	    localFlatten1 starting
	    localFlatten1 finished in 0.65 + 0.49 (43% GC)
	    constantPropagation starting
	    constantPropagation finished in 2.04 + 2.08 (50% GC)
	    useless starting
	    useless finished in 2.48 + 2.34 (49% GC)
	    removeUnused2 starting
	    removeUnused2 finished in 1.08 + 0.74 (41% GC)
	    simplifyTypes starting
	    simplifyTypes finished in 0.61 + 2.29 (79% GC)
	    polyEqual starting
	    polyEqual finished in 0.08 + 0.00 (0% GC)
	    polyHash starting
	    polyHash finished in 0.06 + 0.00 (0% GC)
	    introduceLoops2 starting
	    introduceLoops2 finished in 0.01 + 0.00 (0% GC)
	    loopInvariant2 starting
	    loopInvariant2 finished in 0.34 + 0.18 (35% GC)
	    contify2 starting
	    contify2 finished in 0.36 + 0.00 (0% GC)
	    inlineNonRecursive starting
	    inlineNonRecursive finished in 0.76 + 0.46 (38% GC)
	    localFlatten2 starting
	    localFlatten2 finished in 0.56 + 0.21 (27% GC)
	    removeUnused3 starting
	    removeUnused3 finished in 1.15 + 0.36 (24% GC)
	    contify3 starting
	    contify3 finished in 0.48 + 0.41 (46% GC)
	    introduceLoops3 starting
	    introduceLoops3 finished in 0.00 + 0.00 (0% GC)
	    loopInvariant3 starting
	    loopInvariant3 finished in 0.56 + 0.17 (24% GC)
	    localRef starting
	    localRef finished in 1.12 + 0.86 (43% GC)
	    flatten starting
	    flatten finished in 0.86 + 0.74 (46% GC)
	    localFlatten3 starting
	    localFlatten3 finished in 0.56 + 0.21 (28% GC)
	    combineConversions starting
	    combineConversions finished in 0.57 + 0.26 (31% GC)
	    commonArg starting
	    commonArg finished in 0.80 + 1.10 (58% GC)
	    commonSubexp starting
	    commonSubexp finished in 0.79 + 0.00 (0% GC)
	    commonBlock starting
	    commonBlock finished in 0.39 + 0.37 (48% GC)
	    redundantTests starting
	    redundantTests finished in 0.95 + 0.00 (0% GC)
	    redundant starting
	    redundant finished in 0.63 + 0.00 (0% GC)
	    knownCase starting
	    knownCase finished in 2.13 + 0.77 (27% GC)
	    removeUnused4 starting
	    removeUnused4 finished in 1.04 + 0.46 (31% GC)
	    orderFunctions1 starting
	    orderFunctions1 finished in 0.12 + 0.00 (0% GC)
	    typeCheck starting
	    typeCheck finished in 0.63 + 0.00 (0% GC)
	 ssaSimplify finished in 28.54 + 17.30 (38% GC)
	 toSsa2 starting
	 toSsa2 finished in 0.63 + 0.00 (0% GC)
	 ssa2Simplify starting
	    typeCheck starting
	    typeCheck finished in 0.67 + 0.49 (42% GC)
	    deepFlatten starting
	    deepFlatten finished in 2.20 + 0.97 (31% GC)
	    refFlatten starting
	    refFlatten finished in 1.53 + 0.00 (0% GC)
	    removeUnused5 starting
	    removeUnused5 finished in 1.46 + 0.89 (38% GC)
	    zone starting
	    zone finished in 0.00 + 0.00 (0% GC)
	    orderFunctions2 starting
	    orderFunctions2 finished in 0.16 + 0.00 (0% GC)
	    typeCheck starting
	    typeCheck finished in 0.81 + 0.58 (42% GC)
	 ssa2Simplify finished in 6.83 + 2.94 (30% GC)
	 backend starting
	    toRssa starting
	    toRssa finished in 1.14 + 0.00 (0% GC)
	    rssaSimplify starting
	       rssaShrink1 starting
